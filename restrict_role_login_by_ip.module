<?php

/**
 * @file
 * Module file for Restricting role Login by IP.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;

/**
 * Implements hook_user_login().
 */
function restrict_role_login_by_ip_user_login($account) {
  $roles_to_restrict = [];
  $config = \Drupal::config('restrict_role_login_by_ip.settings');
  $roles_to_restrict = $config->get('restrict_role_login_by_ip_header_roles');
  $restriction_applies = count(array_intersect($account->getRoles(), $roles_to_restrict));

  if ($restriction_applies) {
    $header = $config->get('restrict_role_login_by_ip_header');
    $ip2check = $_SERVER[$header];

    $ipaddresses = explode(";", $config->get('restrict_role_login_by_ip_header_restriction', ''));

    // Assume all ips are blacklisted. Change this to 0 if the current ip falls
    // in whitelist.
    $should_restrict = 1;
    // Check each ip address individually.
    foreach ($ipaddresses as $ipaddress) {
      if (_restrict_role_login_by_ip_cidrcheck($ip2check, $ipaddress)) {
        // IP found to be from whitelist.
        $should_restrict = 0;
        break;
      }
    }

    if ($should_restrict) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      user_logout();
      $url = Url::fromRoute('user.login', [], ['query' => ['logout' => 'restrict']]);
      $response = new RedirectResponse($url->toString());
      $response->send();
    }
  }
}

/**
 * Check ip address against a network in cidr notation.
 * E.g:
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.10.0/24'); returns 1
 * _restrict_by_ip_cidrcheck('192.168.10.100','192.168.12.0/24'); returns 0
 * Borrowed directly from restrict_by_ip module
 */
function _restrict_role_login_by_ip_cidrcheck($iptocheck, $ipslashcidr) {
  // Seperate ip address and cidr mask.
  $netmask = explode("/", $ipslashcidr);
  // Get valid network as long.
  $ip_net = ip2long($netmask[0]);
  // Get valid network mask as long.
  $ip_mask = ~((1 << (32 - $netmask[1])) - 1);
  // Get ip address to check as long.
  $ip_ip = ip2long($iptocheck);
  // Mask ip address to check to get subnet.
  $ip_ip_net = $ip_ip & $ip_mask;
  // Only returns 1 if the valid network and the subnet of the ip address
  // to check are the same.
  return ($ip_ip_net == $ip_net);
}
